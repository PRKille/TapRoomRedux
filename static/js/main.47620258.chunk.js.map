{"version":3,"sources":["Components/Header.js","Components/TapRoom/Keg.js","Components/KegFolder/KegForm.js","Components/TapRoom/TapRoom.js","Components/KegDetails/KegDetails.js","actions/index.js","actions/ActionTypes.js","Components/TapControl.js","Components/App.js","serviceWorker.js","reducers/index.js","reducers/tap-control-reducer.js","reducers/keg-toggle-reducer.js","reducers/keg-detail-reducer.js","Components/InitialState.js","index.js"],"names":["Header","className","Keg","props","id","name","abv","price","inventory","count","onClick","onBeerPuchase","Fragment","onKegClick","KegForm","onSubmit","formSubmissionHandler","type","placeholder","buttonText","TapRoom","sortList","Object","values","tapList","sort","a","b","toLowerCase","map","keg","brand","onKegSelection","onPintSold","event","preventDefault","onNewKegPurchase","target","value","v4","KegDetails","onKegDeletion","handleBackToTapRoom","onKegEdit","deleteKeg","addKeg","kegDetail","TapControl","currentPage","showTapRoom","component","handleKegSelection","handleNewKegPurchase","handlePintPurchase","selectedKeg","handleKegDelete","handleKegEdit","newKeg","dispatch","newInventory","updatedKeg","this","React","Component","connect","state","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","assign","newState","initialState","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47620258.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Header() {\r\n  return(\r\n    <div className=\"header\">\r\n      <h1>Welcome to the Epicodus Tap Room!</h1>\r\n      <p>Formerly known as The Rialto</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Keg = (props) => {\r\n\r\n  function hasInventory(count) {\r\n    return count > 10 ? <button onClick={() => props.onBeerPuchase(props.id)}>Purchase</button>\r\n      : count <= 10 && count > 0 ? <React.Fragment><p>Almost Out!</p><button onClick={() => props.onBeerPuchase(props.id)}>Purchase</button></React.Fragment>\r\n      : <p>Sold Out!</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"keg\" id={props.id}>\r\n      <h3>{props.name}</h3>\r\n      <h4>ABV: {props.abv} Price/Pint: {props.price}</h4>\r\n      <h4>Pints Remaining: {props.inventory}</h4>\r\n      {hasInventory(props.inventory)}\r\n      <button onClick={() => props.onKegClick(props.id)}>Beer Details</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nKeg.propTypes = {\r\n  id: PropTypes.string,\r\n  inventory: PropTypes.number,\r\n  name: PropTypes.string,\r\n  price: PropTypes.string,\r\n  onKegClick: PropTypes.func,\r\n  onBeerPuchase: PropTypes.func\r\n}\r\n\r\nexport default Keg;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction KegForm(props) {\r\n  return (\r\n    <div>\r\n      <form onSubmit={props.formSubmissionHandler}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Beer Name\" />\r\n        <input\r\n          type=\"text\"\r\n          name=\"brand\"\r\n          placeholder=\"Brewery\" />\r\n        <input\r\n          type=\"text\"\r\n          name=\"price\"\r\n          placeholder=\"Price per Pint\" />\r\n        <input\r\n          type=\"text\"\r\n          name=\"abv\"\r\n          placeholder=\"ABV\" />\r\n        <button type='submit'>{props.buttonText}</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nKegForm.propTypes = {\r\n  formSubmissionHandler: PropTypes.func,\r\n  buttonText: PropTypes.string\r\n}\r\n\r\nexport default KegForm;","import React from 'react';\r\nimport Keg from './Keg';\r\nimport KegForm from '../KegFolder/KegForm'\r\nimport PropTypes from \"prop-types\";\r\nimport { v4 } from 'uuid';\r\n\r\nfunction TapRoom(props){\r\n\r\n  function handleKegPurchaseSubmit(event) {\r\n    event.preventDefault();\r\n    props.onNewKegPurchase({\r\n      name: event.target.name.value, \r\n      brand: event.target.brand.value, \r\n      price: event.target.price.value, \r\n      abv: event.target.abv.value,\r\n      inventory: 124,\r\n      id: v4()});\r\n  }\r\n\r\n  let sortList = Object.values(props.tapList).sort((a,b) =>{\r\n    const nameA = a.name.toLowerCase();\r\n    const nameB = b.name.toLowerCase();\r\n    return nameA < nameB ? -1 : 1;\r\n  });\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"kegs\">\r\n        {sortList.map((keg) => (\r\n          <div>\r\n            <hr />\r\n            <Keg\r\n              name={keg.name}\r\n              brand={keg.brand}\r\n              price={keg.price}\r\n              abv={keg.abv}\r\n              inventory={keg.inventory}\r\n              id={keg.id}\r\n              onKegClick={props.onKegSelection}\r\n              onBeerPuchase={props.onPintSold} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <hr />\r\n      <div>\r\n        <h3>Buy a new Keg: </h3>\r\n        <KegForm \r\n        formSubmissionHandler={handleKegPurchaseSubmit}\r\n        buttonText=\"Purchase Keg\" />\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nTapRoom.propTypes = {\r\n  tapList: PropTypes.object,\r\n  onNewKegPurchase: PropTypes.func,\r\n  onKegSelection: PropTypes.func\r\n}\r\n\r\nexport default TapRoom;","import React from 'react';\r\nimport KegForm from '../KegFolder/KegForm'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst KegDetails = (props) => {\r\n\r\n  function handleKegEditSubmit(event) {\r\n    event.preventDefault();\r\n    const name = event.target.name.value ? event.target.name.value : props.keg.name;\r\n    const brand = event.target.brand.value ? event.target.brand.value : props.keg.brand;\r\n    const price = event.target.price.value ? event.target.price.value : props.keg.price;\r\n    const abv = event.target.abv.value ? event.target.abv.value : props.keg.abv;\r\n    props.onKegEdit({\r\n      name: name, \r\n      brand:brand, \r\n      price: price, \r\n      abv: abv,\r\n      inventory: props.keg.inventory,\r\n      id: props.keg.id});\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>{props.keg.name}</h1>\r\n      <h3>{props.keg.brand}</h3>\r\n      <p>ABV: {props.keg.abv}  Pints Left: {props.keg.inventory}</p>\r\n      <button onClick={() => props.onKegDeletion(props.keg.id)}>Delete Keg</button>\r\n      <button onClick={props.handleBackToTapRoom}>Back to Tap Room</button>\r\n      <div>\r\n        <KegForm\r\n          formSubmissionHandler={handleKegEditSubmit}\r\n          buttonText=\"Edit this Keg\" />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nKegDetails.propTypes = {\r\n  keg: PropTypes.object,\r\n  handleBackToTapRoom: PropTypes.func,\r\n  onKegDeletion: PropTypes.func,\r\n  onKegEdit: PropTypes.func\r\n}\r\n\r\nexport default KegDetails;","import * as c from './ActionTypes';\r\n\r\nexport const deleteKeg = id => ({\r\n  type: c.DELETE_KEG,\r\n  id\r\n});\r\n\r\nexport const toggleDetail = () => ({\r\n  type: c.TOGGLE_DETAIL\r\n});\r\n\r\nexport const addKeg = keg => {\r\n  const { name, brand, price, abv, inventory, id } = keg;\r\n  return {\r\n    type: c.ADD_KEG,\r\n    name: name,\r\n    brand: brand,\r\n    price: price,\r\n    abv: abv,\r\n    inventory: inventory,\r\n    id: id\r\n  }\r\n};\r\n\r\nexport const kegDetail = keg => {\r\n  const { name, brand, price, abv, inventory, id } = keg;\r\n  return {\r\n    type: c.KEG_DETAIL,\r\n    name: name,\r\n    brand: brand,\r\n    price: price,\r\n    abv: abv,\r\n    inventory: inventory,\r\n    id: id\r\n  }\r\n};","export const ADD_KEG = 'ADD_KEG';\r\nexport const DELETE_KEG = 'DELETE_KEG';\r\nexport const TOGGLE_DETAIL = 'TOGGLE_DETAIL';\r\nexport const KEG_DETAIL = 'KEG_DETAIL';","import React from 'react';\r\nimport '../App.css';\r\nimport TapRoom from './TapRoom/TapRoom';\r\nimport KegDetails from './KegDetails/KegDetails';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as a from './../actions';\r\n\r\nclass TapControl extends React.Component {\r\n\r\n  currentPage = () => {\r\n    if (this.props.showTapRoom) {\r\n      return {\r\n        component:<TapRoom\r\n          tapList={this.props.tapList}\r\n          onKegSelection={this.handleKegSelection}\r\n          onNewKegPurchase={this.handleNewKegPurchase}\r\n          onPintSold={this.handlePintPurchase}\r\n        />\r\n      }\r\n    } else {\r\n      return{\r\n        component:<KegDetails\r\n          keg={this.props.selectedKeg}\r\n          handleBackToTapRoom={this.handleBackToTapRoom}\r\n          onKegDeletion={this.handleKegDelete}\r\n          onKegEdit={this.handleKegEdit} />\r\n      }\r\n    }\r\n  }\r\n\r\n  handleKegEdit= (newKeg) => {\r\n    const {dispatch} = this.props;\r\n    const action = a.addKeg(newKeg);\r\n    dispatch(action);\r\n    const action2 = a.toggleDetail();\r\n    dispatch(action2);\r\n  }\r\n\r\n  handleKegDelete = (id) => {\r\n    const {dispatch} = this.props;\r\n    const action = a.deleteKeg(id);\r\n    dispatch(action);\r\n    const action2 = a.toggleDetail();\r\n    dispatch(action2);\r\n  }\r\n\r\n  handlePintPurchase = (id) => {\r\n    const selectedKeg = this.props.tapList[id];\r\n    const newInventory = selectedKeg.inventory-1;\r\n    const updatedKeg = {...selectedKeg, inventory: newInventory};\r\n    const {dispatch} = this.props;\r\n    const action = a.addKeg(updatedKeg);\r\n    dispatch(action);\r\n  }\r\n\r\n  handleNewKegPurchase = (newKeg) => {\r\n    const { dispatch } = this.props;\r\n    const action = a.addKeg(newKeg);\r\n    dispatch(action);\r\n  }\r\n\r\n  handleKegSelection = (id) => {\r\n    const selectedKeg = this.props.tapList[id];\r\n    const {dispatch} = this.props;\r\n    const action = a.kegDetail(selectedKeg);\r\n    dispatch(action);\r\n    const action2 = a.toggleDetail();\r\n    dispatch(action2);\r\n  }\r\n\r\n  handleBackToTapRoom = () => {\r\n    const {dispatch} = this.props;\r\n    const action = a.toggleDetail();\r\n    dispatch(action);\r\n  }\r\n\r\n  render() {\r\n    let currentPage = this.currentPage();\r\n    return (\r\n      <React.Fragment>\r\n        {currentPage.component}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTapControl.propTypes = {\r\n  tapList: PropTypes.object,\r\n  showTapRoom: PropTypes.bool,\r\n  selectedKeg: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tapList: state.tapList,\r\n    showTapRoom: state.showTapRoom,\r\n    selectedKeg: state.selectedKeg\r\n  }\r\n}\r\n\r\nTapControl = connect(mapStateToProps)(TapControl);\r\n\r\nexport default TapControl;","import React from 'react';\r\nimport '../App.css';\r\nimport Header from './Header';\r\nimport TapControl from './TapControl';\r\n\r\nfunction App(){\r\n  return ( \r\n    <React.Fragment>\r\n      <Header />\r\n      <TapControl />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import kegDetailReducer from './keg-detail-reducer';\r\nimport tapControlReducer from './tap-control-reducer';\r\nimport kegToggleReducer from './keg-toggle-reducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n  tapList: tapControlReducer,\r\n  showTapRoom: kegToggleReducer,\r\n  selectedKeg: kegDetailReducer\r\n});\r\n\r\nexport default rootReducer;","import * as c from './../actions/ActionTypes';\r\n\r\nexport default (state = {}, action) => {\r\n  const {name, brand, price, abv, inventory, id} = action;\r\n  switch(action.type) {\r\n    case c.ADD_KEG:\r\n      return Object.assign({}, state, {\r\n        [id]: {\r\n          name: name,\r\n          brand: brand,\r\n          price: price,\r\n          abv: abv,\r\n          inventory: inventory,\r\n          id: id\r\n        }\r\n      });\r\n    case c.DELETE_KEG:\r\n      const newState = {...state};\r\n      delete newState[id];\r\n      return newState;\r\n  default:\r\n    return state;\r\n  }\r\n};","export default (state = true, action) => {\r\n  switch (action.type) {\r\n  case 'TOGGLE_DETAIL':\r\n    return !state;\r\n  default:\r\n    return state;\r\n  }\r\n};","import * as c from './../actions/ActionTypes';\r\n\r\nexport default (state = {}, action) => {\r\n  const {name, brand, price, abv, inventory, id } = action;\r\n  switch(action.type) {\r\n    case c.KEG_DETAIL:\r\n      return Object.assign({}, state, {\r\n          name: name,\r\n          brand: brand,\r\n          price: price,\r\n          abv: abv,\r\n          inventory: inventory,\r\n          id: id\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n}","let initialState = {\r\n  showTapRoom: true,\r\n  selectedKeg: {},\r\n  tapList: {\r\n    \"1\": {\r\n      name: \"Ranier\",\r\n      brand: \"Ranier\",\r\n      price: \"$3\",\r\n      abv: \"4.6%\",\r\n      inventory: 89,\r\n      id: \"1\"\r\n    },\r\n    \"2\": {\r\n      name: \"Old Rasputin Russian Imperial Stout\",\r\n      brand: \"North Coast Brewing Co\",\r\n      price: \"$6\",\r\n      abv: \"9.0%\",\r\n      inventory: 24,\r\n      id: \"2\"\r\n    },\r\n    \"3\": {\r\n      name: \"ESB English Ale\",\r\n      brand: \"Ferment\",\r\n      price: \"$6\",\r\n      abv: \"5.4\",\r\n      inventory: 12,\r\n      id: \"3\"\r\n    }\r\n  }\r\n}\r\nexport default initialState;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './reducers/index';\r\nimport initialState from './Components/InitialState';\r\n\r\nconst store = createStore(rootReducer, initialState, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}